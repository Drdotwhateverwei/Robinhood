rm(list = ls())

#Use RSelenium to navigate and autoload the target webpage
library(RSelenium)

link<-"/pagetoscrape/..."
driver<-RSelenium::rsDriver(port = 4567L, 
                            browser = "chrome", 
                            version = "latest", 
                            chromever = "81.0.4044.138")
remDr<-driver[["client"]]
remDr$navigate(link)

for(i in 1:10){
  remDr$executeScript(paste("scroll(0,",i*10000,");"))
  Sys.sleep(3)
}

#Scrape information from the fully-loaded webpage
library(rvest)
library(tidyverse)

page_source<-remDr$getPageSource()
web<-read_html(unlist(page_source), encoding = "UTF-8")

review_id<-web %>% 
  html_nodes("span.we-customer-review__user") %>% 
  html_text()

review_title<-web %>% 
  html_nodes("h3.we-customer-review__title") %>% 
  html_text()

review_date<-web %>% 
  html_nodes("time.we-customer-review__date") %>% 
  html_text()

review_rating<-web %>% 
  html_nodes("figure.we-customer-review__rating") %>% 
  html_attr("aria-label") %>% 
  substr(1,1) %>% 
  as.numeric()

review_body<-web %>% 
  html_nodes("blockquote.we-customer-review__body") %>% 
  html_text()

review_results<-data.frame(ID = review_id,
                           Title = review_title,
                           Date = review_date,
                           Rating = review_rating,
                           Body = review_body)
remDr$close()

#Write dataframe into excel file
library(writexl)
setwd("/Users/robinwei/Desktop/App store scraping/Data")
write_xlsx(review_results, path = "reviews_app store.xlsx")

View(review_results)






